#!/bin/bash
# Core batch analyzer via GDB
# 2020 Alessandro Paganelli (alessandro.paganelli@gmail.com)
# 
# The goal of this script is to simplify batch analysis of large amounts of 
# core dumps that may be generated on a linux box.
# Pre-requisites:
# 1) gdb is installed and can be run by the user
# 2) Core dumps are placed in a single directory

#------------------------------------------------------------------------------
# Constants
CORE_DIR=/tmp/core/
GDB=/usr/bin/gdb

# This is the binary that produced the core dump
TARGET_BIN=/simple/example/of/program

# This file actually contains the commands to be executed by GDB.
# See init_gdb_cmds_file function to customize it.
GDB_CMD_FILE=/tmp/cmds.gdb

#------------------------------------------------------------------------------
# inputs
CORE_PATTERN="$1"
OUTPUT_FILE="$2"

#------------------------------------------------------------------------------
# functions
function usage()
{
	echo "Usage:"
	echo "$1 <core-name-pattern> <output-file-name>"
	echo
}

function print_banner()
{
	echo "GDB core analyzer"
	echo "Using pattern: $CORE_PATTERN"
	echo "Core dir:      $CORE_DIR"
	echo "Target bin:    $TARGET_BIN"
}

function print_end_banner()
{
	echo "Done!"
	echo
}

function check_output_file_and_backup()
{
	if [[ -f "$OUTPUT_FILE" ]]; then
		echo "Found output file = $OUTPUT_FILE, backupping it."
		mv "$OUTPUT_FILE" "$OUTPUT_FILE.bak"
	fi
}

function print_core_separator()
{
	echo "--------------------------------------------------------"
	echo "CORE START: Considering core = $1"
	echo 
}

function init_gdb_cmds_file()
{
	echo "# automatically generated by $1" > "$GDB_CMD_FILE"
	echo "set width 0" >> "$GDB_CMD_FILE"
	echo "set height 0" >> "$GDB_CMD_FILE"
	echo "set verbose off" >> "$GDB_CMD_FILE"

	# Note: should you need full backtrace, append "full" here
	echo "thread apply all bt" >> "$GDB_CMD_FILE"
}

#------------------------------------------------------------------------------
# actual script

# parameters check
if [[ -z "$CORE_PATTERN" ]]; then
	usage "$0"
	exit 1
fi

if [[ -z "$OUTPUT_FILE" ]]; then
	usage "$0"
	exit 2
fi

# Check if gdb cmds file is present. If not, init it with default values.
if [[ ! -f "$GDB_CMD_FILE" ]]; then
	init_gdb_cmds_file "$0"
fi

print_banner
check_output_file_and_backup

for f in $CORE_DIR/*$CORE_PATTERN*; do
	print_core_separator $f | tee -a "$OUTPUT_FILE"
	
	# actual gdb call
	"$GDB" --batch --command="$GDB_CMD_FILE" "$TARGET_BIN" "$f" >> "$OUTPUT_FILE"
done

print_end_banner

